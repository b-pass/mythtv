#!/usr/bin/env python3

from __future__ import print_function
import sys
import re
import random
import datetime

if len(sys.argv) < 2:
    print(sys.argv[0] + " <file> [model]")
    sys.exit(1)

input_info = []
input_data = []
input_answers = []

def load(file_obj):
    info = []
    data = []
    answers = []
    haveAnswers = False
    for line in file_obj:
        line = line.strip()
        if not line or line[0] == '#':
            continue
        
        parts = line.split()
        if len(parts) < 11:
            print("Ignored bad line: " + line)
            continue
        
        if parts[2][-1] == '-':
            parts[2] += parts[3]
            del parts[3]
        
        score = int(parts[0])
        if score == 0:
            answers += [[1.0, 0.0]]
        elif score < 0:
            answers += [[1.0, 0.0]]
            haveAnswers = True
        else:
            answers += [[0.0, 1.0]]
            haveAnswers = True
            
        info += [parts[2]]
        
        data += [[float(x) for x in parts[3:]]]
    
    if not haveAnswers:
        answers = []
    
    return (info, data, answers)

(input_info, input_data, input_answers) = load(sys.stdin if sys.argv[1] == '-' else open(sys.argv[1], 'r'))

import tensorflow as tf
import numpy as np

if len(sys.argv) > 2:
    model = sys.argv[2]
else:
    model = '/data/models/mcf.meta'

sess = tf.Session()
with sess:
    saver = tf.train.import_meta_graph(model)
    saver.restore(sess, model[0:model.rfind('.')])
    graph = tf.get_default_graph()

    #Access the appropriate output for fine-tuning
    inputs = graph.get_tensor_by_name('inputs:0')
    answers = graph.get_tensor_by_name('answers:0')
    keep_prob = graph.get_tensor_by_name('keep_prob:0')
    network = graph.get_tensor_by_name('main:0')
    accuracy = graph.get_tensor_by_name('accuracy:0')

    outputs = sess.run(network,feed_dict={inputs:input_data, keep_prob:1.0})

    for i in range(len(input_data)):
        s = str(input_info[i]).split('-')[0].strip()
        s += ","
        if outputs[i][1] >= 0.5:
            s += '1'
        else:
            s += '-1'
        #if input_answers:
        #    if input_answers[i][1] >= 0.5:
        #        s += ',1'
        #    else:
        #        s += ',-1'
        print(s)
