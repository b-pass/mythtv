#!/usr/bin/env python3

from __future__ import print_function
import sys
import re
import random
import datetime
import os

if len(sys.argv) < 2:
    print(sys.argv[0] + " <file> [model] [-a]")
    print("File format:")
    print('''
Truthiness Start Frame-Frame Len Pos Scenes Logo Formats Sides Center Rear

Truthiness = is this a commercial (for training)
Start = Offset in seconds from start of show (not used)
Frame-Frame = Range of frame numbers for this segment, used in output
Len = Length in seconds of segment
Pos = Normalized position (-1 = first 10 mins, 0 = middle, 1 = last 10 mins)
Scenes = Scene change rate (seconds per scene)
Logo = Logo detection (as percent of frames)
Formats = Number of format changes
Sides = Average peak audio of left and right channels
Center = Average peak audio of center channel
Read = Average peak audio of rear/surround channels

Truthiness is a raw score, where < 0 is a commercial and > 0
is a show segment and == 0 is unknown

Audio should be absolute value peak (from 0 to 32768).  If a channel is
not present, set to 0.  If no audio available, set all to zero.

# comment lines and blank lines are legal and ignored
    ''')
    sys.exit(1)

input_info = []
input_data = []
input_answers = []
input_data_ext = []
extra = False

def OLDload(filename):
    info = []
    data = []
    answers = []
    haveAnswers = False
    for line in open(filename, 'r'):
        line = line.strip()
        if not line or line[0] == '#':
            continue

        parts = line.split()
        if len(parts) < 11:
            print("Ignored bad line: " + line)
            continue

        if parts[2][-1] == '-':
            parts[2] += parts[3]
            del parts[3]

        score = int(parts[0])
        haveAnswers = haveAnswers or score != 0

        answers += [1 if score < 0 else 0]
        info += [parts[2]]

        sec = int(parts[1].split(':')[0])*60 + float(parts[1].split(':')[1])
        parts[4] = (sec % 3600) / 15.0 / (3600.0/15.0)
        data += [[max(0.0,min(float(x),1.0)) for x in parts[3:]]]

    if not haveAnswers:
        answers = []

    return (info, data, answers)

def normalize(when,parts):
    #print(len(parts),parts,file=sys.stderr)
    when = float(when - int(when / 3600)*3600) / 3600.0
    parts[0] = float(parts[0])
    parts[1] = float(parts[1]) / parts[0]
    parts[2] = float(parts[2])
    parts[3] = float(parts[3]) / parts[0]
    parts[4] = float(parts[4]) / parts[0]
    for c in range(8):
        parts[5+c*2] = float(parts[5+c*2]) / parts[0]
        parts[6+c*2] = float(parts[6+c*2]) / 32767.0
    return [when] + parts

def load(filename):
    info = []
    data = []
    answers = []
    
    ctime = 0
    logo = 0.0
    nologo = 0.0
    for line in open(filename, 'r'):
        line = line.strip()
        if not line or line[0] == '#':
            continue
        
        parts = line.split()
        if len(parts) < 11:
            print(filename + ": Ignored bad line: " + line)
            continue
        
        if parts[2][-1] == '-':
            parts[2] += parts[3]
            del parts[3]
        
        score = int(parts[0])
        if score == 0:
            continue
        elif score < 0:
            answers += [[1.0]]
        else:
            answers += [[0.0]]
        
        info += [parts[2]]

        sec = int(parts[1].split(':')[0])*60 + float(parts[1].split(':')[1])
        
        d = normalize(sec, parts[3:])
        data.append(d)
        
    return (info, data, answers)
(input_info, input_data, input_answers) = load(sys.argv[1])

os.system('cp '+sys.argv[1]+' /tmp/test')

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

if len(sys.argv) > 2:
    model = sys.argv[2]
    print("Using " + model)
else:
    model = '/data/models/latest'

model = keras.models.load_model(model)

last_ans = 0.0
ctime = 0.0
for i in range(len(input_data)):
	input_data[i].append(last_ans)
	output = model.predict([input_data[i]],verbose=0,batch_size=1)
	if output > 0.5:
		last_ans = 1.0
		ctime = 0.0
	else:
		last_ans = 0.0
		ctime += input_data[i][1]

	s = str(input_info[i]).split('-')[0].strip()
	s += ","
	s += '-1' if last_ans else '1'

	print(s)

#writer.close()

